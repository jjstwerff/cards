Test WebSocket connection with only identification.
- authentification message from client
	do not allow any other message till answer is correct
- respond with challenge
	if ((session != null) && (session.isOpen())) {
		session.getRemote().sendString("got: " + message, null);
	}	
- respond with answer
- validate answer locally

Jetty SSL self signed:
- allow to set admin account on startup without accounts
- allow to log into an account
- allow to add an account on login screen
- show accounts and allow to reset passwords by admin
 
 
Database rewrites:
- fix code generation of arrays
	generate code
	code to fill arrays correctly
- implement meta data request
- blocks array per area -> index
	array of blocks.. to far away = remove block

Implement information, needed, request and send request.
- internal state on information
	write state in WebSocket
	write state from java script
- send needed when internal information matches
	function to match blocks vs current position .. x/y/z via index when possible
		round x,y down to last %30 = introduce 30 as MAX_SIZE constant
		find current x/y in index.. move back to y-2 and forward to y+2
		find x-1/y in index.. move back/forwards on y
		find x-2/y in index.. move back/forwards on y
		find x+1/y in index.. move back/forwards on y
		find x+2/y in index.. move back/forwards on y
	send internal block identifiers to other side.. but not actual blocks locations
	remember state in java script.. request details as creation from java script .. log the occurrence
- implement 'edit' on server side
	find correct tile/wall from click location
		for now use distances to middles of near tiles/wall.. later use actual points in wall to find middle
	change the tile & send block identifier
- send valid on intervals

- both side of their implementation.
- fill the correct data on tiles in the array
- draw these tiles on the canvas
	filled path in correct color (add color to floor)
	six sided outline for reference

- test idle timeout behavior: does it close the connection correctly??
	for now assume the correct behavior

Jetty integration
- load initial data.. canvas that can be reused
	it should be known to the canvas where in the world we are/our rotation? .. so we can change position/move later
	directly use websocket for this work
	request data with current view as parameters.. in pixels
	return known blocks in/near view with etag
	retrieve each needed blocks on name -> convert to separate canvas objects + window.requestAnimationFrame(draw);
		function (time) {}
- click wall/floor tiles
	start websocket.. keep alive .. log results to consoe
	load new data
- create text-backup file of the database
	do it on a timer...
	new name with rotation in temp directory
	also on close of the application.. into own application directory
		for now in same file as read on startup
	button to save/stop application?
- tab with position (x,y) inside the world

Drag from the side bar to the current scene.
Select inside the current scene:
	onmousedown / onmouseup in scene
	!event.shiftKey
		object.onmousemove = function(e){};
			redraw canvas...
			e.preventDefault();
			c.save();
			c.globalAlpha = 0.5;
			c.drawImage(buffer, e.clientX, e.clientY);
			c.restore();
Move the current scene:
    onmousedown / onmouseup in scene
	event.shiftKey

- undo buffer.. last action / last continues simple edits
	elder content around a position
- rotate world .. needed for easy drag/drop
- drag select tiles to named elements / multiple layers
	rename, copy, remove, add layers
	tooltip with details.. ref of html page with details
- select named element and edit details
- save map and defined elements
    flip/rotate element.. possibly 15% rotate

- more types of 90Â° angles to walls.. no crosses yet
	two types of angles.. 
- walls with specified thickness
	inner points are not the same position as outer points
		loop through the 6 walls instead of the 3 upper walls per tile
			add color numbers to to the defined materials
			use this loop to fill the tile with the correct color
		when the wall size = 0 stop with this routine
		detect if one side of the wall is filled... stop with this routine
			determine the resulting wall angles at the end points
			move this point with the thickness relative to the 2 wall angles towards the tile
- inside walls between rooms with possible crosses and connection to outer walls
- doors / window indications
	indicator of what is inside and what is outside the rooms
	each type of door/window will have an indicator if they open outwards or inwards
	inner room doors normally open towards outer doors (halls)
- 15% walls: 8 sided towers
- trapezoid bay window
- first simple rounded tower / stairs
- separate map with cached move of points: this is for efficiency to prevent several times recalculation
	2 values per tile .. Left/Right both top.. for now 8 bytes.. more bit packing is not yet implemented
	L/R direction of movement (0-47) possibly 94  .. 6 bits
	L/R distance of movement in points (0-50)..      6 bits
	L/R direction of normal (0-47) possibly 94..     6 bits		for round structures
	height difference of point relative to center	 1 byte
- indicators of player/NPC/item positions
- very simple editor.. show current position/rotation.. allow to change current material/walls in directions
- multiple levels and stairs.. including roofs.. do not show levels above the player
- show as web-GL object
- semi-transparent levels above the player
- general lighting .. spot lights
- optional view from player... do not draw distance
- draw distance with calculated height map
- long distance with less accurate height map
- near distance with displacement map


shader for terrain example
https://github.com/mrdoob/three.js/blob/master/examples/js/ShaderTerrain.js
